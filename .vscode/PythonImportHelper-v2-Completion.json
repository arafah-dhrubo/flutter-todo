[
    {
        "label": "db",
        "importPath": "app.extensions",
        "description": "app.extensions",
        "isExtraImport": true,
        "detail": "app.extensions",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Todo",
        "importPath": "app.models.todo",
        "description": "app.models.todo",
        "isExtraImport": true,
        "detail": "app.models.todo",
        "documentation": {}
    },
    {
        "label": "bp",
        "importPath": "app.todo",
        "description": "app.todo",
        "isExtraImport": true,
        "detail": "app.todo",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "api.app.models.todo",
        "description": "api.app.models.todo",
        "peekOfCode": "class Todo(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(150))\n    description = db.Column(db.Text)\n    completed = db.Column(db.Boolean, default=False)\n    def __repr__(self):\n        return f'<Post \"{self.title}\">'\n    def __init__(self, title, description, completed=False):\n        self.title = title\n        self.description = description",
        "detail": "api.app.models.todo",
        "documentation": {}
    },
    {
        "label": "todos",
        "kind": 2,
        "importPath": "api.app.todo.routes",
        "description": "api.app.todo.routes",
        "peekOfCode": "def todos():\n    data = Todo.query.all()\n    if request.method == 'POST':\n        data = request.get_json()\n        todo = Todo(\n            title=data['title'], \n            description = data['description'],\n            )\n        db.session.add(todo)\n        db.session.commit()",
        "detail": "api.app.todo.routes",
        "documentation": {}
    },
    {
        "label": "get_todo",
        "kind": 2,
        "importPath": "api.app.todo.routes",
        "description": "api.app.todo.routes",
        "peekOfCode": "def get_todo(id):\n    todo = Todo.query.get(id)\n    if request.method == 'PUT':\n        data = request.get_json()\n        if not data or 'title' not in data or 'description' not in data or 'isCompleted' not in data:\n            return jsonify({'error': 'Invalid request data'}), 400\n        todo.title = data['title']\n        todo.description = data['description']\n        todo.completed = data['isCompleted']\n        try:",
        "detail": "api.app.todo.routes",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "api.app.extensions",
        "description": "api.app.extensions",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "api.app.extensions",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "api.config",
        "description": "api.config",
        "peekOfCode": "class Config:\n    SECRET_KEY = os.getenv('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    FLASK_APP = os.getenv('FLASK_APP')\n    FLASK_ENV = os.getenv('FLASK_ENV')",
        "detail": "api.config",
        "documentation": {}
    },
    {
        "label": "basedir",
        "kind": 5,
        "importPath": "api.config",
        "description": "api.config",
        "peekOfCode": "basedir = os.path.abspath(os.path.dirname(__file__))\nclass Config:\n    SECRET_KEY = os.getenv('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    FLASK_APP = os.getenv('FLASK_APP')\n    FLASK_ENV = os.getenv('FLASK_ENV')",
        "detail": "api.config",
        "documentation": {}
    }
]